// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using N.G.HRS.Date;

#nullable disable

namespace N.G.HRS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240624184000_J5")]
    partial class J5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EducationalQualificationQualifications", b =>
                {
                    b.Property<int>("EducationalQualificationId")
                        .HasColumnType("int");

                    b.Property<int>("qualificationsId")
                        .HasColumnType("int");

                    b.HasKey("EducationalQualificationId", "qualificationsId");

                    b.HasIndex("qualificationsId");

                    b.ToTable("EducationalQualificationAndQualification", (string)null);
                });

            modelBuilder.Entity("EmployeeQualifications", b =>
                {
                    b.Property<int>("employeesId")
                        .HasColumnType("int");

                    b.Property<int>("qualificationsId")
                        .HasColumnType("int");

                    b.HasKey("employeesId", "qualificationsId");

                    b.HasIndex("qualificationsId");

                    b.ToTable("EmployeesQualifications", (string)null);
                });

            modelBuilder.Entity("FunctionalFilesStatementOfEmployeeFiles", b =>
                {
                    b.Property<int>("FunctionalFilesId")
                        .HasColumnType("int");

                    b.Property<int>("StatementOfEmployeeFilesId")
                        .HasColumnType("int");

                    b.HasKey("FunctionalFilesId", "StatementOfEmployeeFilesId");

                    b.HasIndex("StatementOfEmployeeFilesId");

                    b.ToTable("FunctionalFilesOfStatementOfEmployeeFiles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("N.G.HRS.Areas.AalariesAndWages.Models.AdditionalAccountInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FromDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("FromTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LaboratoriesPerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NightPeriodParameter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NormalCoefficient")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("OfficialHolidaysLab")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("ToDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ToTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("WeekendLaboratories")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("additionalAccountInformation");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AalariesAndWages.Models.AllowancesAndDiscounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AddedToAllEmployees")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("CumulativeAllowance")
                        .HasColumnType("bit");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(170)
                        .HasColumnType("nvarchar(170)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Percentage")
                        .HasColumnType("int");

                    b.Property<bool>("SubjectToInsurance")
                        .HasColumnType("bit");

                    b.Property<bool>("Taxable")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("allowancesAndDiscounts");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AalariesAndWages.Models.BasicDataForTheSalaryStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AllowancesIncluded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("FromDate")
                        .HasColumnType("date");

                    b.Property<string>("HealthInsuranceIncluded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncludesAdditionalData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncludesTaxCalculation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncludesTheWorkShareInRetirementInsurance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Percentage")
                        .HasColumnType("int");

                    b.Property<int?>("PercentageOnCompany")
                        .HasColumnType("int");

                    b.Property<int?>("PercentageOnEmployee")
                        .HasColumnType("int");

                    b.Property<string>("RetirementInsuranceIncluded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("basicDataForTheSalaryStatements");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AalariesAndWages.Models.BasicDataForWagesAndSalaries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AbsencePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DelayPerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("FromDate")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("NumberOfMonthsDays")
                        .HasColumnType("int");

                    b.Property<decimal>("OneFingerPrintPerHourDelay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("ToDate")
                        .HasColumnType("date");

                    b.Property<string>("TypeOfWage")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("basicDataForWagesAndSalaries");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AalariesAndWages.Models.EmployeeAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("FinanceAccountId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("FinanceAccountTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FinanceAccountId");

                    b.HasIndex("FinanceAccountTypeId");

                    b.ToTable("EmployeeAccount");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AalariesAndWages.Models.SectionsAccounts", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("FinanceAccountId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("FinanceAccountTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("SectionsId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("FinanceAccountId");

                    b.HasIndex("FinanceAccountTypeId");

                    b.HasIndex("SectionsId");

                    b.ToTable("SectionsAccounts");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.AdjustingTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateOnly>("FromDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("FromTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PeriodsId")
                        .HasColumnType("int");

                    b.Property<int>("PermanenceModelsId")
                        .HasColumnType("int");

                    b.Property<string>("StaffTimeStatues")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("ToDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ToTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PeriodsId");

                    b.HasIndex("PermanenceModelsId");

                    b.ToTable("adjustingTimes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AdjustingTime");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.LinkingEmployeesToShiftPeriods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOfEndWork")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOfStartWork")
                        .HasColumnType("date");

                    b.Property<int?>("DepartmentsId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodsId")
                        .HasColumnType("int");

                    b.Property<int?>("PermanenceModelsId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentsId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PeriodsId");

                    b.HasIndex("PermanenceModelsId");

                    b.HasIndex("SectionsId");

                    b.ToTable("linkingEmployeesToShiftPeriods");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.Months", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Closed")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("Month")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("months");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.OneFingerprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("FromDate")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("OneDayFingerprint")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("oneFingerprints");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.OpeningBalancesForVacations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<int>("BalanceYear")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PublicHolidaysId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PublicHolidaysId");

                    b.ToTable("openingBalancesForVacations");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.Periods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Friday")
                        .HasColumnType("bit");

                    b.Property<TimeOnly?>("FromTime")
                        .HasColumnType("time");

                    b.Property<int?>("Hours")
                        .HasColumnType("int");

                    b.Property<bool>("Monday")
                        .HasColumnType("bit");

                    b.Property<int?>("Muinutes")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodsId")
                        .HasColumnType("int");

                    b.Property<string>("PeriodsName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PermanenceModelsId")
                        .HasColumnType("int");

                    b.Property<bool>("Saturday")
                        .HasColumnType("bit");

                    b.Property<bool>("SunDay")
                        .HasColumnType("bit");

                    b.Property<bool>("Thursday")
                        .HasColumnType("bit");

                    b.Property<TimeOnly?>("ToTime")
                        .HasColumnType("time");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("bit");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PeriodsId");

                    b.HasIndex("PermanenceModelsId");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.PermanenceModels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("FlexibleWorkingHours")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("FromDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("FromTime")
                        .HasColumnType("datetime2");

                    b.Property<double?>("HoursOfWorks")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PermanenceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("ToDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ToTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WorkBetweenTwoShifts")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("permanenceModels");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.PermissionToAttendAndLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PermanencyStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("permissionToAttendAndLeaves");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.StaffTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodId")
                        .HasColumnType("int");

                    b.Property<int?>("PermanenceModelsId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionsId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("WorksFullTimeFromDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("PermanenceModelsId");

                    b.HasIndex("SectionsId");

                    b.ToTable("staffTimes");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.Weekends", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<bool>("Friday")
                        .HasColumnType("bit");

                    b.Property<bool>("MonDay")
                        .HasColumnType("bit");

                    b.Property<int?>("PeriodsId")
                        .HasColumnType("int");

                    b.Property<int?>("PermanenceModelsId")
                        .HasColumnType("int");

                    b.Property<bool>("SaturDay")
                        .HasColumnType("bit");

                    b.Property<bool>("SunDay")
                        .HasColumnType("bit");

                    b.Property<bool>("Thursday")
                        .HasColumnType("bit");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("bit");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PeriodsId");

                    b.HasIndex("PermanenceModelsId");

                    b.ToTable("weekends");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Weekends");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrentJop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateInsurance")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfEmployment")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("DateOfStoppingWork")
                        .HasColumnType("date");

                    b.Property<int>("DepartmentsId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(170)
                        .HasColumnType("nvarchar(170)");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<string>("EmploymentStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("FingerPrintImage")
                        .HasColumnType("tinyint");

                    b.Property<int?>("FingerprintDevicesId")
                        .HasColumnType("int");

                    b.Property<string>("ImageFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobDescriptionId")
                        .HasColumnType("int");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("PlacementDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("RehireDate")
                        .HasColumnType("date");

                    b.Property<int>("SectionsId")
                        .HasColumnType("int");

                    b.Property<bool>("SubjectToInsurance")
                        .HasColumnType("bit");

                    b.Property<bool>("UsedFingerprint")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentsId");

                    b.HasIndex("FingerprintDevicesId");

                    b.HasIndex("JobDescriptionId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SectionsId");

                    b.ToTable("employee");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.EmployeeArchives", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Descriotion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeArchives");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.Family", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RelativesTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RelativesTypeId");

                    b.ToTable("Family");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.FinancialStatements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BankAccountNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("InsuranceAccountNumber")
                        .HasColumnType("int");

                    b.Property<string>("NatureOfEmployment")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("SalaryEndDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SalaryStartDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("financialStatements");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.Guarantees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommercialRegistrationNo")
                        .HasColumnType("int");

                    b.Property<string>("HomeAdress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("MaritalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameOfTheBusiness")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NumberOfDependents")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("ShopAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("MaritalStatusId");

                    b.ToTable("guarantees");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.PersonalData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CardExpiryDate")
                        .HasColumnType("date");

                    b.Property<int>("CardNumber")
                        .HasColumnType("int");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("GuaranteesId")
                        .HasColumnType("int");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("MaritalStatusId")
                        .HasColumnType("int");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<int>("ReligionId")
                        .HasColumnType("int");

                    b.Property<int>("SexId")
                        .HasColumnType("int");

                    b.Property<string>("ToRelease")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("GuaranteesId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("SexId");

                    b.ToTable("personalDatas");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.PracticalExperiences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("ExperiencesName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateOnly>("FromDate")
                        .HasColumnType("date");

                    b.Property<string>("PlacToGainExperience")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<DateOnly>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("practicalExperiences");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.Qualifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("ReceivedDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("qualifications");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.StatementOfEmployeeFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("FilesStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("statementOfEmployeeFiles");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.TrainingCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("FromDate")
                        .HasColumnType("date");

                    b.Property<string>("NameCourses")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateOnly>("ToDate")
                        .HasColumnType("date");

                    b.Property<string>("WhereToGetIt")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("trainingCourses");
                });

            modelBuilder.Entity("N.G.HRS.Areas.EmployeesAffsirs.Models.AdministrativeDecisions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DecisionsType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeementOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeementReson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("SalaryEndtDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SalaryStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AdministrativeDecisions");
                });

            modelBuilder.Entity("N.G.HRS.Areas.EmployeesAffsirs.Models.AdministrativePromotions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentsId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentsId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AdministrativePromotions");
                });

            modelBuilder.Entity("N.G.HRS.Areas.EmployeesAffsirs.Models.AnnualGoals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Goals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AnnualGoals");
                });

            modelBuilder.Entity("N.G.HRS.Areas.EmployeesAffsirs.Models.EmployeeMovements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrentJop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDown")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("LastJop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("jopdescriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("jopdescriptionId");

                    b.ToTable("EmployeeMovements");
                });

            modelBuilder.Entity("N.G.HRS.Areas.EmployeesAffsirs.Models.EmploymentStatusManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmploymentStatusManagement");
                });

            modelBuilder.Entity("N.G.HRS.Areas.EmployeesAffsirs.Models.Permits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("For")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNotEmployee")
                        .HasColumnType("bit");

                    b.Property<string>("NotEmployee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermitsType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Permits");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Finance.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("CurrencyNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("CurrentPriceOfCurrency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PreviousPriceOfCurrency")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Finance.Models.FinanceAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FinanceAccount");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Finance.Models.FinanceAccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FinanceAccountType");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.ContractTerms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContractsId")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StatementOfConditions")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContractsId");

                    b.ToTable("contractTerms");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Contracts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("contracts");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Data")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("country");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Directorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("directorates");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.EducationalQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("educationalQualifications");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.FingerprintDevices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly>("DateOfPurchase")
                        .HasColumnType("date");

                    b.Property<string>("DeviceSpecifications")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DeviceStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DevicesName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("bit");

                    b.Property<string>("ManufactureCompany")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("VendorAdress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("VendorName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("VendorPhon")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.ToTable("fingerprintDevices");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.FunctionalFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("functionalFiles");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("governorates");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("maritalStatuses");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NationalityName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("nationality");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.OfficialVacations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("FromDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ToDate")
                        .HasColumnType("date");

                    b.Property<string>("VacationsName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("officialVacations");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Permissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("PermissionStatus")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionsDuration")
                        .HasColumnType("int");

                    b.Property<int>("RepeatPermissionDuringTheMonth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.PublicHolidays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Balance")
                        .HasColumnType("bit");

                    b.Property<int?>("DayCount")
                        .HasColumnType("int");

                    b.Property<string>("HolidayName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<int?>("RotationDuration")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("publicHolidays");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.RelativesType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RelativeName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("relativesTypes");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("religion");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Sex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("sex");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Specialties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("specialties");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Universities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("N.G.HRS.Areas.MaintenanceControl.Models.AdditionalExternalOfWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Assignment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BetweenToDate")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FromTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.Property<string>("Mission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubstituteEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("TaskDestination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ToTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SubstituteEmployeeId");

                    b.ToTable("AdditionalExternalOfWork");
                });

            modelBuilder.Entity("N.G.HRS.Areas.MaintenanceControl.Models.AttendanceRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PeriodsId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeOnlyRecord")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PeriodsId");

                    b.HasIndex("SectionId");

                    b.ToTable("AttendanceRecord");
                });

            modelBuilder.Entity("N.G.HRS.Areas.MaintenanceControl.Models.EmployeePermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BetweenToDate")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Duration")
                        .HasColumnType("float");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FromTime")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Hours")
                        .HasColumnType("float");

                    b.Property<int?>("Minutes")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupervisorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ToTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("EmployeePermissions");
                });

            modelBuilder.Entity("N.G.HRS.Areas.MaintenanceControl.Models.StaffVacations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DonorSide")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PerDay")
                        .HasColumnType("int");

                    b.Property<int>("PerHour")
                        .HasColumnType("int");

                    b.Property<int>("PerMinute")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodsId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<int?>("SubstituteStaffMemberId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VacationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PeriodsId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SubstituteStaffMemberId");

                    b.HasIndex("VacationId");

                    b.ToTable("StaffVacations");
                });

            modelBuilder.Entity("N.G.HRS.Areas.MaintenanceControl.Models.VacationBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Annual")
                        .HasColumnType("int");

                    b.Property<int>("Editorial")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("Expendables")
                        .HasColumnType("int");

                    b.Property<int>("Residual")
                        .HasColumnType("int");

                    b.Property<int>("ShiftHour")
                        .HasColumnType("int");

                    b.Property<int>("Transferred")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("VacationBalance");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.BoardOfDirectors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CouncilName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateOnly?>("Date")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<int?>("MembershipOfTheBoardOfDirectorsId")
                        .HasColumnType("int");

                    b.Property<string>("NameOfMembership")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("MembershipOfTheBoardOfDirectorsId");

                    b.ToTable("boardOfDirectors");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.Branches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BranchesAdress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BranchesEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchesName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("BranchesPhone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectorateId")
                        .HasColumnType("int");

                    b.Property<int?>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("GovernorateId");

                    b.ToTable("branches");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BoardOfDirectorsId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ComponyAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ComponyLogo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("LicenseNumber")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TypeOfBusinessActivity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BoardOfDirectorsId");

                    b.ToTable("company");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("SectorsId")
                        .HasColumnType("int");

                    b.Property<string>("SubAdministration")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("SectorsId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.MembershipOfTheBoardOfDirectors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TypeOFMembership")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("membershipOfTheBoardOfs");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.PublicAdministration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nots")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PublicAdministrationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("publicAdministrations");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.Sections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepartmentsId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SectionsName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentsId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.Sectors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchesId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SectorsName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("BranchesId");

                    b.ToTable("sectors");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PayRoll.Models.AutomaticallyApprovedAdd_on", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateOnly>("FromDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("FromTime")
                        .HasColumnType("time");

                    b.Property<double?>("Hours")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<int?>("Minutes")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("SectionsId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateOnly>("ToDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("ToTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SectionsId");

                    b.ToTable("AutomaticallyApprovedAdd_on");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PayRoll.Models.EmployeeAdvances", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeAccountId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeAccountId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SectionId");

                    b.ToTable("EmployeeAdvances");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PayRoll.Models.EmployeeLoans", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<bool>("Arrest")
                        .HasColumnType("bit");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<double>("InstallmentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("InstallmentStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NumberOfInstallmentMonths")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeLoans");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PayRoll.Models.EmployeePerks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeePerks");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PayRoll.Models.EndOfServiceClearance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Absence")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AdvancesAndLoans")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("EndOfServiceBenefits")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndOfServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LastApprovedSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtherDiscounts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtherEntitlements")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReasonForClearance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServicePeriodPerYear")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VacationEntitlements")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EndOfServiceClearance");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PayRoll.Models.EntitlementsAndDeductions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("FinanceAccountTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Percentage")
                        .HasColumnType("int");

                    b.Property<bool>("Taxable")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FinanceAccountTypeId");

                    b.ToTable("EntitlementsAndDeductions");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PayRoll.Models.VacationAllowances", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<decimal>("CarryoverBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmplyeeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("VacationBalance")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("VacationAllowances");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PenaltiesAndViolations.Models.Penalties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deduction")
                        .HasColumnType("bit");

                    b.Property<bool>("DeductionFromSalary")
                        .HasColumnType("bit");

                    b.Property<bool>("DeductionFromTheDailyWage")
                        .HasColumnType("bit");

                    b.Property<bool>("DiscountFromWorkingHours")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("PenaltiesAndViolationsFormsId")
                        .HasColumnType("int");

                    b.Property<string>("PenaltiesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Percent")
                        .HasColumnType("int");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PenaltiesAndViolationsFormsId");

                    b.ToTable("Penalties");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PenaltiesAndViolations.Models.PenaltiesAndViolationsForms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NumberOfTime")
                        .HasColumnType("int");

                    b.Property<int?>("PenaltiesId")
                        .HasColumnType("int");

                    b.Property<int?>("ViolationsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PenaltiesId");

                    b.HasIndex("ViolationsId");

                    b.ToTable("penaltiesAndViolationsForms");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PenaltiesAndViolations.Models.Violations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ViolationsName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Violations");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PlanningAndJobDescription.Models.FunctionalCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoriesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("functionalCategories");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PlanningAndJobDescription.Models.FunctionalClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("functionalClasses");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PlanningAndJobDescription.Models.JobDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Authorities")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("FunctionalCategoriesId")
                        .HasColumnType("int");

                    b.Property<int?>("FunctionalClassId")
                        .HasColumnType("int");

                    b.Property<string>("JobQualifications")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("JobRanksId")
                        .HasColumnType("int");

                    b.Property<string>("JopName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FunctionalCategoriesId");

                    b.HasIndex("FunctionalClassId");

                    b.HasIndex("JobRanksId");

                    b.ToTable("JobDescription");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PlanningAndJobDescription.Models.JobRanks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RankName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("jobRanks");
                });

            modelBuilder.Entity("N.G.HRS.Areas.RegisterAndLogin.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanAdd")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanShow")
                        .HasColumnType("bit");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ShowFemaleImages")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowMaleImages")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("N.G.HRS.Areas.RegisterAndLogin.Models.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("N.G.HRS.Areas.ViolationsAndPenaltiesAffairs.Models.EmployeeViolations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOnly")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discounts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("Exempt")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberPenalties")
                        .HasColumnType("int");

                    b.Property<int?>("PenaltiesId")
                        .HasColumnType("int");

                    b.Property<bool>("ReceiptOfNotifications")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ViolationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ViolationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PenaltiesId");

                    b.HasIndex("ViolationId");

                    b.ToTable("EmployeeViolations");
                });

            modelBuilder.Entity("QualificationsSpecialties", b =>
                {
                    b.Property<int>("SpecialtiesId")
                        .HasColumnType("int");

                    b.Property<int>("qualificationsId")
                        .HasColumnType("int");

                    b.HasKey("SpecialtiesId", "qualificationsId");

                    b.HasIndex("qualificationsId");

                    b.ToTable("SpecialtiesAndQualification", (string)null);
                });

            modelBuilder.Entity("QualificationsUniversities", b =>
                {
                    b.Property<int>("qualificationsId")
                        .HasColumnType("int");

                    b.Property<int>("universitiesId")
                        .HasColumnType("int");

                    b.HasKey("qualificationsId", "universitiesId");

                    b.HasIndex("universitiesId");

                    b.ToTable("UniversitiesAndQualification", (string)null);
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.SetPeriods", b =>
                {
                    b.HasBaseType("N.G.HRS.Areas.AttendanceAndDeparture.Models.AdjustingTime");

                    b.HasDiscriminator().HasValue("SetPeriods");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.WeekendsForFlexibleWorking", b =>
                {
                    b.HasBaseType("N.G.HRS.Areas.AttendanceAndDeparture.Models.Weekends");

                    b.Property<int>("NumbersOfHours")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("WeekendsForFlexibleWorking");
                });

            modelBuilder.Entity("EducationalQualificationQualifications", b =>
                {
                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.EducationalQualification", null)
                        .WithMany()
                        .HasForeignKey("EducationalQualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.Employees.Models.Qualifications", null)
                        .WithMany()
                        .HasForeignKey("qualificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeQualifications", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("employeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.Employees.Models.Qualifications", null)
                        .WithMany()
                        .HasForeignKey("qualificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FunctionalFilesStatementOfEmployeeFiles", b =>
                {
                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.FunctionalFiles", null)
                        .WithMany()
                        .HasForeignKey("FunctionalFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.Employees.Models.StatementOfEmployeeFiles", null)
                        .WithMany()
                        .HasForeignKey("StatementOfEmployeeFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("N.G.HRS.Areas.AalariesAndWages.Models.AllowancesAndDiscounts", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Finance.Models.Currency", "Currency")
                        .WithMany("AllowancesAndDiscountsList")
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AalariesAndWages.Models.EmployeeAccount", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "employee")
                        .WithMany("EmployeeAccountList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.Finance.Models.FinanceAccount", "FinanceAccount")
                        .WithMany("EmployeeAccountsList")
                        .HasForeignKey("FinanceAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.Finance.Models.FinanceAccountType", "FinanceAccountType")
                        .WithMany("EmployeeAccountsList")
                        .HasForeignKey("FinanceAccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinanceAccount");

                    b.Navigation("FinanceAccountType");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AalariesAndWages.Models.SectionsAccounts", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Finance.Models.FinanceAccount", "FinanceAccount")
                        .WithMany("SectionsAccountsList")
                        .HasForeignKey("FinanceAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.Finance.Models.FinanceAccountType", "FinanceAccountType")
                        .WithMany("SectionsAccountsList")
                        .HasForeignKey("FinanceAccountTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.OrganizationalChart.Models.Sections", "Sections")
                        .WithMany("SectionsAccountsList")
                        .HasForeignKey("SectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinanceAccount");

                    b.Navigation("FinanceAccountType");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.AdjustingTime", b =>
                {
                    b.HasOne("N.G.HRS.Areas.AttendanceAndDeparture.Models.Periods", "Periods")
                        .WithMany("AdjustingTimeList")
                        .HasForeignKey("PeriodsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.AttendanceAndDeparture.Models.PermanenceModels", "PermanenceModels")
                        .WithMany("AdjustingTimeList")
                        .HasForeignKey("PermanenceModelsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Periods");

                    b.Navigation("PermanenceModels");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.LinkingEmployeesToShiftPeriods", b =>
                {
                    b.HasOne("N.G.HRS.Areas.OrganizationalChart.Models.Departments", "Departments")
                        .WithMany("LinkingEmployeesToShiftPeriodsList")
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("LinkingEmployeesToShiftPeriodsList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("N.G.HRS.Areas.AttendanceAndDeparture.Models.Periods", "Periods")
                        .WithMany("LinkingEmployeesToShiftPeriodsList")
                        .HasForeignKey("PeriodsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("N.G.HRS.Areas.AttendanceAndDeparture.Models.PermanenceModels", "PermanenceModels")
                        .WithMany("LinkingEmployeesToShiftPeriodsList")
                        .HasForeignKey("PermanenceModelsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("N.G.HRS.Areas.OrganizationalChart.Models.Sections", "Sections")
                        .WithMany("LinkingEmployeesToShiftPeriodsList")
                        .HasForeignKey("SectionsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Departments");

                    b.Navigation("Employee");

                    b.Navigation("Periods");

                    b.Navigation("PermanenceModels");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.OneFingerprint", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("OneFingerprintList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.OpeningBalancesForVacations", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("OpeningBalancesForVacationsList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.PublicHolidays", "PublicHolidays")
                        .WithMany("OpeningBalancesForVacationsList")
                        .HasForeignKey("PublicHolidaysId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");

                    b.Navigation("PublicHolidays");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.Periods", b =>
                {
                    b.HasOne("N.G.HRS.Areas.AttendanceAndDeparture.Models.Periods", null)
                        .WithMany("PeriodsList")
                        .HasForeignKey("PeriodsId");

                    b.HasOne("N.G.HRS.Areas.AttendanceAndDeparture.Models.PermanenceModels", "PermanenceModels")
                        .WithMany()
                        .HasForeignKey("PermanenceModelsId");

                    b.Navigation("PermanenceModels");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.StaffTime", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("StaffTimeList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("N.G.HRS.Areas.AttendanceAndDeparture.Models.Periods", "Periods")
                        .WithMany("StaffTimeList")
                        .HasForeignKey("PeriodId");

                    b.HasOne("N.G.HRS.Areas.AttendanceAndDeparture.Models.PermanenceModels", "PermanenceModels")
                        .WithMany("StaffTimesList")
                        .HasForeignKey("PermanenceModelsId");

                    b.HasOne("N.G.HRS.Areas.OrganizationalChart.Models.Sections", "Sections")
                        .WithMany("staffTimeList")
                        .HasForeignKey("SectionsId");

                    b.Navigation("Employee");

                    b.Navigation("Periods");

                    b.Navigation("PermanenceModels");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.Weekends", b =>
                {
                    b.HasOne("N.G.HRS.Areas.AttendanceAndDeparture.Models.Periods", "Periods")
                        .WithMany("WeekendsList")
                        .HasForeignKey("PeriodsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("N.G.HRS.Areas.AttendanceAndDeparture.Models.PermanenceModels", "PermanenceModels")
                        .WithMany("WeekendsList")
                        .HasForeignKey("PermanenceModelsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Periods");

                    b.Navigation("PermanenceModels");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.Employee", b =>
                {
                    b.HasOne("N.G.HRS.Areas.OrganizationalChart.Models.Departments", "Departments")
                        .WithMany("EmployeeList")
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.FingerprintDevices", "FingerprintDevices")
                        .WithMany("EmployeeList")
                        .HasForeignKey("FingerprintDevicesId");

                    b.HasOne("N.G.HRS.Areas.PlanningAndJobDescription.Models.JobDescription", "JobDescription")
                        .WithMany("EmployeeList")
                        .HasForeignKey("JobDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Manager")
                        .WithMany("Subordinates")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("N.G.HRS.Areas.OrganizationalChart.Models.Sections", "Sections")
                        .WithMany("EmployeeList")
                        .HasForeignKey("SectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("FingerprintDevices");

                    b.Navigation("JobDescription");

                    b.Navigation("Manager");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.EmployeeArchives", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "employee")
                        .WithOne("employeeArchives")
                        .HasForeignKey("N.G.HRS.Areas.Employees.Models.EmployeeArchives", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.Family", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employees")
                        .WithMany("FamilyList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.RelativesType", "RelativesType")
                        .WithMany("FamiliesList")
                        .HasForeignKey("RelativesTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");

                    b.Navigation("RelativesType");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.FinancialStatements", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Finance.Models.Currency", "Currency")
                        .WithMany("FinancialStatementsList")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "employee")
                        .WithOne("financialStatements")
                        .HasForeignKey("N.G.HRS.Areas.Employees.Models.FinancialStatements", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.Guarantees", b =>
                {
                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.MaritalStatus", "MaritalStatus")
                        .WithMany("GuaranteesList")
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaritalStatus");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.PersonalData", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "employee")
                        .WithOne("personalData")
                        .HasForeignKey("N.G.HRS.Areas.Employees.Models.PersonalData", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.Employees.Models.Guarantees", "guarantees")
                        .WithMany("PersonalDataList")
                        .HasForeignKey("GuaranteesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.MaritalStatus", "MaritalStatus")
                        .WithMany("PersonalDataList")
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.Nationality", "Nationality")
                        .WithMany("personalDatasList")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.Religion", "Religion")
                        .WithMany("PersonalDataList")
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.Sex", "Sex")
                        .WithMany("PersonalDataList")
                        .HasForeignKey("SexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaritalStatus");

                    b.Navigation("Nationality");

                    b.Navigation("Religion");

                    b.Navigation("Sex");

                    b.Navigation("employee");

                    b.Navigation("guarantees");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.PracticalExperiences", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("PracticalExperiencesList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.StatementOfEmployeeFiles", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "EmployeeOne")
                        .WithMany("StatementOfEmployeeFilesList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeOne");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.TrainingCourses", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "EmployeeOne")
                        .WithMany("TrainingCoursesList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeOne");
                });

            modelBuilder.Entity("N.G.HRS.Areas.EmployeesAffsirs.Models.AdministrativeDecisions", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Finance.Models.Currency", "Currency")
                        .WithMany("AdministrativeDecisionsList")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("AdministrativeDecisionsList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("N.G.HRS.Areas.EmployeesAffsirs.Models.AdministrativePromotions", b =>
                {
                    b.HasOne("N.G.HRS.Areas.OrganizationalChart.Models.Departments", "Departments")
                        .WithMany("AdministrativePromotionsList")
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("AdministrativePromotionsList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Departments");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("N.G.HRS.Areas.EmployeesAffsirs.Models.AnnualGoals", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("AnnualGoalsList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("N.G.HRS.Areas.EmployeesAffsirs.Models.EmployeeMovements", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("EmployeeMovementsList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("N.G.HRS.Areas.PlanningAndJobDescription.Models.JobDescription", "jopdescription")
                        .WithMany("EmployeeMovementsList")
                        .HasForeignKey("jopdescriptionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");

                    b.Navigation("jopdescription");
                });

            modelBuilder.Entity("N.G.HRS.Areas.EmployeesAffsirs.Models.EmploymentStatusManagement", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("EmploymentStatusManagementList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("N.G.HRS.Areas.EmployeesAffsirs.Models.Permits", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("PermitsList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.ContractTerms", b =>
                {
                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.Contracts", "Contracts")
                        .WithMany("contractTermsList")
                        .HasForeignKey("ContractsId");

                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Directorate", b =>
                {
                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.Governorate", "Governorate")
                        .WithMany("DirectoratesList")
                        .HasForeignKey("GovernorateId");

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Governorate", b =>
                {
                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.Country", "CountryOne")
                        .WithMany("governoratesList")
                        .HasForeignKey("CountryId");

                    b.Navigation("CountryOne");
                });

            modelBuilder.Entity("N.G.HRS.Areas.MaintenanceControl.Models.AdditionalExternalOfWork", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("AdditionalExternalOfWorkList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "SubstituteEmployee")
                        .WithMany("SEAEOWList")
                        .HasForeignKey("SubstituteEmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");

                    b.Navigation("SubstituteEmployee");
                });

            modelBuilder.Entity("N.G.HRS.Areas.MaintenanceControl.Models.AttendanceRecord", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("AttendanceRecordList")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("N.G.HRS.Areas.AttendanceAndDeparture.Models.Periods", "Period")
                        .WithMany("AttendanceRecordList")
                        .HasForeignKey("PeriodsId");

                    b.HasOne("N.G.HRS.Areas.OrganizationalChart.Models.Sections", "Sections")
                        .WithMany("AttendanceRecordList")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");

                    b.Navigation("Period");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("N.G.HRS.Areas.MaintenanceControl.Models.EmployeePermissions", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("EmployeePermissionsList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.AttendanceAndDeparture.Models.Periods", "Period")
                        .WithMany("EmployeePermissionsList")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.Permissions", "Permission")
                        .WithMany("EmployeePermissionsList")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Supervisor")
                        .WithMany("SupervisorEPList")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Period");

                    b.Navigation("Permission");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("N.G.HRS.Areas.MaintenanceControl.Models.StaffVacations", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("StaffVacationsList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("N.G.HRS.Areas.AttendanceAndDeparture.Models.Periods", "Period")
                        .WithMany("StaffVacationsList")
                        .HasForeignKey("PeriodsId");

                    b.HasOne("N.G.HRS.Areas.OrganizationalChart.Models.Sections", "Sections")
                        .WithMany("StaffVacationsList")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "SubstituteStaffMember")
                        .WithMany("SubstituteStaffMemberList")
                        .HasForeignKey("SubstituteStaffMemberId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.PublicHolidays", "Vacation")
                        .WithMany("StaffVacationsList")
                        .HasForeignKey("VacationId");

                    b.Navigation("Employee");

                    b.Navigation("Period");

                    b.Navigation("Sections");

                    b.Navigation("SubstituteStaffMember");

                    b.Navigation("Vacation");
                });

            modelBuilder.Entity("N.G.HRS.Areas.MaintenanceControl.Models.VacationBalance", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employees")
                        .WithMany("VacationBalanceList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.BoardOfDirectors", b =>
                {
                    b.HasOne("N.G.HRS.Areas.OrganizationalChart.Models.MembershipOfTheBoardOfDirectors", "MembershipOfTheBoardOfDirectors")
                        .WithMany("BoardOfDirectorsList")
                        .HasForeignKey("MembershipOfTheBoardOfDirectorsId");

                    b.Navigation("MembershipOfTheBoardOfDirectors");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.Branches", b =>
                {
                    b.HasOne("N.G.HRS.Areas.OrganizationalChart.Models.Company", "Company")
                        .WithMany("BranchesList")
                        .HasForeignKey("CompanyId");

                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.Country", "Country")
                        .WithMany("BranchesList")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.Directorate", "Directorate")
                        .WithMany("BranchesList")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.Governorate", "Governorate")
                        .WithMany("BranchesList")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("Directorate");

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.Company", b =>
                {
                    b.HasOne("N.G.HRS.Areas.OrganizationalChart.Models.BoardOfDirectors", "BoardOfDirectors")
                        .WithMany("CompanyList")
                        .HasForeignKey("BoardOfDirectorsId");

                    b.Navigation("BoardOfDirectors");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.Departments", b =>
                {
                    b.HasOne("N.G.HRS.Areas.OrganizationalChart.Models.Sectors", "Sectors")
                        .WithMany("DepartmentsList")
                        .HasForeignKey("SectorsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.Sections", b =>
                {
                    b.HasOne("N.G.HRS.Areas.OrganizationalChart.Models.Departments", "Departments")
                        .WithMany("SectionsList")
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.Sectors", b =>
                {
                    b.HasOne("N.G.HRS.Areas.OrganizationalChart.Models.Branches", "Branches")
                        .WithMany("SectorsList")
                        .HasForeignKey("BranchesId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Branches");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PayRoll.Models.AutomaticallyApprovedAdd_on", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("AutomaticallyApprovedAdd_onList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.OrganizationalChart.Models.Sections", "Sections")
                        .WithMany("AutomaticallyApprovedAdd_onList")
                        .HasForeignKey("SectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PayRoll.Models.EmployeeAdvances", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Finance.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.OrganizationalChart.Models.Departments", "Departments")
                        .WithMany("EmployeeAdvancesList")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.AalariesAndWages.Models.EmployeeAccount", "EmployeeAccount")
                        .WithMany("EmployeeAdvancesList")
                        .HasForeignKey("EmployeeAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("EmployeeAdvancesList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.OrganizationalChart.Models.Sections", "Sections")
                        .WithMany("EmployeeAdvancesList")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Departments");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeAccount");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PayRoll.Models.EmployeeLoans", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Finance.Models.Currency", "Currency")
                        .WithMany("EmployeeLoansList")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("EmployeeLoansList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PayRoll.Models.EmployeePerks", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("EmployeePerksList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PayRoll.Models.EndOfServiceClearance", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("EndOfServiceClearanceList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PayRoll.Models.EntitlementsAndDeductions", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Finance.Models.Currency", "Currency")
                        .WithMany("EntitlementsAndDeductionsList")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("EntitlementsAndDeductionsList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.Finance.Models.FinanceAccountType", "Account")
                        .WithMany("EntitlementsAndDeductionsList")
                        .HasForeignKey("FinanceAccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PayRoll.Models.VacationAllowances", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany("VacationAllowancesList")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PenaltiesAndViolations.Models.Penalties", b =>
                {
                    b.HasOne("N.G.HRS.Areas.PenaltiesAndViolations.Models.PenaltiesAndViolationsForms", null)
                        .WithMany("PenaltiesList")
                        .HasForeignKey("PenaltiesAndViolationsFormsId");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PenaltiesAndViolations.Models.PenaltiesAndViolationsForms", b =>
                {
                    b.HasOne("N.G.HRS.Areas.PenaltiesAndViolations.Models.Penalties", "Penalties")
                        .WithMany("PenaltiesAndViolationsFormsList")
                        .HasForeignKey("PenaltiesId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("N.G.HRS.Areas.PenaltiesAndViolations.Models.Violations", "Violations")
                        .WithMany("PenaltiesAndViolationsFormsList")
                        .HasForeignKey("ViolationsId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Penalties");

                    b.Navigation("Violations");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PlanningAndJobDescription.Models.FunctionalCategories", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Finance.Models.Currency", null)
                        .WithMany("FunctionalCategoriesList")
                        .HasForeignKey("CurrencyId");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PlanningAndJobDescription.Models.FunctionalClass", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Finance.Models.Currency", "Currency")
                        .WithMany("FunctionalClassList")
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PlanningAndJobDescription.Models.JobDescription", b =>
                {
                    b.HasOne("N.G.HRS.Areas.PlanningAndJobDescription.Models.FunctionalCategories", "FunctionalCategories")
                        .WithMany("JobDescriptionsList")
                        .HasForeignKey("FunctionalCategoriesId");

                    b.HasOne("N.G.HRS.Areas.PlanningAndJobDescription.Models.FunctionalClass", "FunctionalClass")
                        .WithMany("JobDescriptionsList")
                        .HasForeignKey("FunctionalClassId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("N.G.HRS.Areas.PlanningAndJobDescription.Models.JobRanks", "JobRanks")
                        .WithMany("JobDescriptionList")
                        .HasForeignKey("JobRanksId");

                    b.Navigation("FunctionalCategories");

                    b.Navigation("FunctionalClass");

                    b.Navigation("JobRanks");
                });

            modelBuilder.Entity("N.G.HRS.Areas.ViolationsAndPenaltiesAffairs.Models.EmployeeViolations", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("N.G.HRS.Areas.PenaltiesAndViolations.Models.Penalties", "Penalties")
                        .WithMany()
                        .HasForeignKey("PenaltiesId");

                    b.HasOne("N.G.HRS.Areas.PenaltiesAndViolations.Models.Violations", "Violations")
                        .WithMany("EmployeeViolationsList")
                        .HasForeignKey("ViolationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");

                    b.Navigation("Penalties");

                    b.Navigation("Violations");
                });

            modelBuilder.Entity("QualificationsSpecialties", b =>
                {
                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.Specialties", null)
                        .WithMany()
                        .HasForeignKey("SpecialtiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.Employees.Models.Qualifications", null)
                        .WithMany()
                        .HasForeignKey("qualificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QualificationsUniversities", b =>
                {
                    b.HasOne("N.G.HRS.Areas.Employees.Models.Qualifications", null)
                        .WithMany()
                        .HasForeignKey("qualificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("N.G.HRS.Areas.GeneralConfiguration.Models.Universities", null)
                        .WithMany()
                        .HasForeignKey("universitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("N.G.HRS.Areas.AalariesAndWages.Models.EmployeeAccount", b =>
                {
                    b.Navigation("EmployeeAdvancesList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.Periods", b =>
                {
                    b.Navigation("AdjustingTimeList");

                    b.Navigation("AttendanceRecordList");

                    b.Navigation("EmployeePermissionsList");

                    b.Navigation("LinkingEmployeesToShiftPeriodsList");

                    b.Navigation("PeriodsList");

                    b.Navigation("StaffTimeList");

                    b.Navigation("StaffVacationsList");

                    b.Navigation("WeekendsList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.AttendanceAndDeparture.Models.PermanenceModels", b =>
                {
                    b.Navigation("AdjustingTimeList");

                    b.Navigation("LinkingEmployeesToShiftPeriodsList");

                    b.Navigation("StaffTimesList");

                    b.Navigation("WeekendsList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.Employee", b =>
                {
                    b.Navigation("AdditionalExternalOfWorkList");

                    b.Navigation("AdministrativeDecisionsList");

                    b.Navigation("AdministrativePromotionsList");

                    b.Navigation("AnnualGoalsList");

                    b.Navigation("AttendanceRecordList");

                    b.Navigation("AutomaticallyApprovedAdd_onList");

                    b.Navigation("EmployeeAccountList");

                    b.Navigation("EmployeeAdvancesList");

                    b.Navigation("EmployeeLoansList");

                    b.Navigation("EmployeeMovementsList");

                    b.Navigation("EmployeePerksList");

                    b.Navigation("EmployeePermissionsList");

                    b.Navigation("EmploymentStatusManagementList");

                    b.Navigation("EndOfServiceClearanceList");

                    b.Navigation("EntitlementsAndDeductionsList");

                    b.Navigation("FamilyList");

                    b.Navigation("LinkingEmployeesToShiftPeriodsList");

                    b.Navigation("OneFingerprintList");

                    b.Navigation("OpeningBalancesForVacationsList");

                    b.Navigation("PermitsList");

                    b.Navigation("PracticalExperiencesList");

                    b.Navigation("SEAEOWList");

                    b.Navigation("StaffTimeList");

                    b.Navigation("StaffVacationsList");

                    b.Navigation("StatementOfEmployeeFilesList");

                    b.Navigation("Subordinates");

                    b.Navigation("SubstituteStaffMemberList");

                    b.Navigation("SupervisorEPList");

                    b.Navigation("TrainingCoursesList");

                    b.Navigation("VacationAllowancesList");

                    b.Navigation("VacationBalanceList");

                    b.Navigation("employeeArchives");

                    b.Navigation("financialStatements");

                    b.Navigation("personalData");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Employees.Models.Guarantees", b =>
                {
                    b.Navigation("PersonalDataList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Finance.Models.Currency", b =>
                {
                    b.Navigation("AdministrativeDecisionsList");

                    b.Navigation("AllowancesAndDiscountsList");

                    b.Navigation("EmployeeLoansList");

                    b.Navigation("EntitlementsAndDeductionsList");

                    b.Navigation("FinancialStatementsList");

                    b.Navigation("FunctionalCategoriesList");

                    b.Navigation("FunctionalClassList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Finance.Models.FinanceAccount", b =>
                {
                    b.Navigation("EmployeeAccountsList");

                    b.Navigation("SectionsAccountsList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.Finance.Models.FinanceAccountType", b =>
                {
                    b.Navigation("EmployeeAccountsList");

                    b.Navigation("EntitlementsAndDeductionsList");

                    b.Navigation("SectionsAccountsList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Contracts", b =>
                {
                    b.Navigation("contractTermsList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Country", b =>
                {
                    b.Navigation("BranchesList");

                    b.Navigation("governoratesList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Directorate", b =>
                {
                    b.Navigation("BranchesList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.FingerprintDevices", b =>
                {
                    b.Navigation("EmployeeList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Governorate", b =>
                {
                    b.Navigation("BranchesList");

                    b.Navigation("DirectoratesList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.MaritalStatus", b =>
                {
                    b.Navigation("GuaranteesList");

                    b.Navigation("PersonalDataList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Nationality", b =>
                {
                    b.Navigation("personalDatasList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Permissions", b =>
                {
                    b.Navigation("EmployeePermissionsList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.PublicHolidays", b =>
                {
                    b.Navigation("OpeningBalancesForVacationsList");

                    b.Navigation("StaffVacationsList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.RelativesType", b =>
                {
                    b.Navigation("FamiliesList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Religion", b =>
                {
                    b.Navigation("PersonalDataList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.GeneralConfiguration.Models.Sex", b =>
                {
                    b.Navigation("PersonalDataList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.BoardOfDirectors", b =>
                {
                    b.Navigation("CompanyList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.Branches", b =>
                {
                    b.Navigation("SectorsList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.Company", b =>
                {
                    b.Navigation("BranchesList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.Departments", b =>
                {
                    b.Navigation("AdministrativePromotionsList");

                    b.Navigation("EmployeeAdvancesList");

                    b.Navigation("EmployeeList");

                    b.Navigation("LinkingEmployeesToShiftPeriodsList");

                    b.Navigation("SectionsList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.MembershipOfTheBoardOfDirectors", b =>
                {
                    b.Navigation("BoardOfDirectorsList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.Sections", b =>
                {
                    b.Navigation("AttendanceRecordList");

                    b.Navigation("AutomaticallyApprovedAdd_onList");

                    b.Navigation("EmployeeAdvancesList");

                    b.Navigation("EmployeeList");

                    b.Navigation("LinkingEmployeesToShiftPeriodsList");

                    b.Navigation("SectionsAccountsList");

                    b.Navigation("StaffVacationsList");

                    b.Navigation("staffTimeList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.OrganizationalChart.Models.Sectors", b =>
                {
                    b.Navigation("DepartmentsList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PenaltiesAndViolations.Models.Penalties", b =>
                {
                    b.Navigation("PenaltiesAndViolationsFormsList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PenaltiesAndViolations.Models.PenaltiesAndViolationsForms", b =>
                {
                    b.Navigation("PenaltiesList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PenaltiesAndViolations.Models.Violations", b =>
                {
                    b.Navigation("EmployeeViolationsList");

                    b.Navigation("PenaltiesAndViolationsFormsList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PlanningAndJobDescription.Models.FunctionalCategories", b =>
                {
                    b.Navigation("JobDescriptionsList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PlanningAndJobDescription.Models.FunctionalClass", b =>
                {
                    b.Navigation("JobDescriptionsList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PlanningAndJobDescription.Models.JobDescription", b =>
                {
                    b.Navigation("EmployeeList");

                    b.Navigation("EmployeeMovementsList");
                });

            modelBuilder.Entity("N.G.HRS.Areas.PlanningAndJobDescription.Models.JobRanks", b =>
                {
                    b.Navigation("JobDescriptionList");
                });
#pragma warning restore 612, 618
        }
    }
}
